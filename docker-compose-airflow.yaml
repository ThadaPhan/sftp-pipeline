services:
  postgres:
    container_name: postgres
    image: postgres:16
    networks:
      - airflow_network
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 5s

  redis:
    image: redis:latest
    container_name: redis
    networks:
      - airflow_network
    ports:
      - "6379:6379"

  airflow-init:
    image: apache/airflow:2.10.2-python3.12
    container_name: airflow_init
    user: 0:0
    networks:
      - airflow_network
    entrypoint: /bin/bash
    command:
      - -c
      - |
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins,config,airflow.cfg} 
        exec /entrypoint airflow version
    environment:
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    volumes:
      - ./airflow.cfg:/opt/airflow/airflow.cfg
      - ./logs:/opt/airflow/logs
      - ./dags:/opt/airflow/dags
      - ./plugins:/opt/airflow/plugins
      - ./config:/opt/airflow/config

  airflow-webserver:
    image: apache/airflow:2.10.2-python3.12
    container_name: airflow_webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    user: "${AIRFLOW_UID}:0"
    networks:
      - airflow_network
    volumes:
      - ./airflow.cfg:/opt/airflow/airflow.cfg
      - ./logs:/opt/airflow/logs
      - ./dags:/opt/airflow/dags
      - ./plugins:/opt/airflow/plugins
      - ./config:/opt/airflow/config
    ports:
      - "8080:8080"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      retries: 5
      timeout: 5s

  airflow-scheduler:
    image: apache/airflow:2.10.2-python3.12
    container_name: airflow_scheduler
    user: "${AIRFLOW_UID}:0"
    networks:
      - airflow_network
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    volumes:
      - ./airflow.cfg:/opt/airflow/airflow.cfg
      - ./logs:/opt/airflow/logs
      - ./dags:/opt/airflow/dags
      - ./plugins:/opt/airflow/plugins
      - ./config:/opt/airflow/config
    command: scheduler
    healthcheck:
      test: ["CMD", "airflow", "scheduler", "health"]
      interval: 10s
      retries: 5
      timeout: 5s

  airflow-worker:
    image: apache/airflow:2.10.2-python3.12
    container_name: airflow_worker
    user: "${AIRFLOW_UID}:0"
    networks:
      - airflow_network
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    volumes:
      - ./airflow.cfg:/opt/airflow/airflow.cfg
      - ./logs:/opt/airflow/logs
      - ./dags:/opt/airflow/dags
      - ./plugins:/opt/airflow/plugins
      - ./config:/opt/airflow/config
    command: celery worker

volumes:
  postgres_data:

networks:
  airflow_network:
    external: true